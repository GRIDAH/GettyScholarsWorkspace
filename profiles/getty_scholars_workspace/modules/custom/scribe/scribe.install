<?php

/**
 * Implements hook_schema().
 */
function scribe_schema() {
  $schema = array();

  $schema['scribe_attacher_field'] = array(
    'description' => 'A table storing configuration for which fields are annotable.',
    'fields' => array(
      'field_name' => array(
        'description' => 'The machine name of the field on which annotation can happen.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The name of the entity type which can be annotated',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'bundle' => array(
        'description' => 'The name of the bundle type which can be annotated.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('field_name', 'entity_type', 'bundle'),
  );

  $schema['scribe_attachment'] = array(
    'description' => 'Stores which fields have annotations attached to them.',
    'fields' => array(
      'attachment_id' => array(
        'description' => 'The ID of of the attachment to which the annotation is associated.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of the attachment being made, such as text, image, etc.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'field_name' => array(
        'description' => 'The machine name of the field which is annotated.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The name of the entity type which is annotated.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'bundle' => array(
        'description' => 'The name of the bundle for the annotated entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_id' => array(
        'description' => 'The ID of the entity that is annotated.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the annoation was created',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the annoation was updated',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user that created the attachment',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('attachment_id'),
  );

  $schema['scribe_annotation_type'] = array(
    'description' => 'A table storing information for types of annotations.',
    'fields' => array(
      'machine_name' => array(
        'description' => 'A machine readable name for the annotation type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'human_name' => array(
        'description' => 'A human readable name for the annotation type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'An optional description for the annotation type.',
        'type' => 'text',
      ),
    ),
    'primary key' => array('machine_name'),
  );

  $schema['scribe_annotation'] = array(
    'description' => 'A table storing individual annotation records.',
    'fields' => array(
      'annotation_id' => array(
        'description' => 'The primary identifier for an annotation record.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'parent_id' => array(
        'description' => 'The identifier for the parent of the annotation.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'desrcription' => 'The type of the annotation being stored.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'text' => array(
        'description' => 'The stored text of the annotation.',
        'type' => 'text',
        'size' => 'normal',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the annoation was created',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the annoation was updated',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user that created the attachment',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('annotation_id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function scribe_install() {
  if (!field_info_field('field_parent_ref')) {
    $field = array(
      'field_name' => 'field_parent_ref',
      'type' => 'entityreference',
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'scribe_attachment',
        'handler_settings' => array(
          array('target_bundles' => array('text', 'image')),
        ),
      ),
    );
    field_create_field($field);
  }

  // Attach the parent reference to the annotation bundle
  scribe_attach_required_fields('text');
  scribe_attach_required_fields('image');
}

/**
 * Implements hook_uninstall().
 */
function scribe_uninstall() {
  // Delete any field instances
  $instance = array(
    'field_name' => 'field_parent_ref',
    'entity_type' => 'scribe_annotation',
    'bundle' => $bundle,
    'label' => t('Parent Reference'),
    'widget' => array(
      'type' => 'options_select',
    ),
    'settings' => array(
      'target_type' => 'scribe_attachment',
      'handler_settings' => array(
        array('target_bundles' => array('text', 'image')),
      ),
    ),
  );
  field_delete_instance($instance);

  // Delete our refernce field
  field_delete_field('field_parent_ref');
}
