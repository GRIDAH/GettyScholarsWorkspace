// Generated by CoffeeScript 1.6.2
(function() {
  var $,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  Annotator.Plugin.ImageAnnotator = (function(_super) {
    var activeEditor;

    __extends(ImageAnnotator, _super);

    ImageAnnotator.prototype['events'] = {
      'annotationDeleted': 'annotationDeleted'
    };

    activeEditor = null;

    ImageAnnotator.prototype.options = {
      readOnly: false
    };

    function ImageAnnotator(element, options) {
      this.setReadOnly = __bind(this.setReadOnly, this);
      this.onAnnotatorEditorHide = __bind(this.onAnnotatorEditorHide, this);
      this.imageAnnotatorMouseOut = __bind(this.imageAnnotatorMouseOut, this);
      this.annotationDeleted = __bind(this.annotationDeleted, this);
      this.imageAnnotatorMouseOver = __bind(this.imageAnnotatorMouseOver, this);
      this.enableAnnotator = __bind(this.enableAnnotator, this);
      this.disableAnnotator = __bind(this.disableAnnotator, this);
      this.imageAnnotatorAnnotationHovered = __bind(this.imageAnnotatorAnnotationHovered, this);
      this.imageAnnotatorSelectFinish = __bind(this.imageAnnotatorSelectFinish, this);
      this.imageAnnotatorSelectStart = __bind(this.imageAnnotatorSelectStart, this);
      this._initEditingBehaviors = __bind(this._initEditingBehaviors, this);
      this._initMatchingImages = __bind(this._initMatchingImages, this);      ImageAnnotator.__super__.constructor.apply(this, arguments);
      this.editors = {};
    }

    ImageAnnotator.prototype.pluginInit = function() {
      if (!Annotator.supported()) {
        return;
      }
      return this._initMatchingImages()._initEditingBehaviors();
    };

    ImageAnnotator.prototype._initMatchingImages = function() {
      var _this = this;

      $(this.element).find('img').each(function(index, el) {
        var editor, pathname, src;

        editor = new Annotator.ImageAnnotator(el, _this.options);
        editor.on('imageAnnotatorMouseOver', _this.imageAnnotatorMouseOver);
        editor.on('imageAnnotatorMouseOut', _this.imageAnnotatorMouseOut);
        editor.on('imageAnnotatorSelectStart', _this.imageAnnotatorSelectStart);
        editor.on('imageAnnotatorSelectFinish', _this.imageAnnotatorSelectFinish);
        editor.on('imageAnnotatorAnnotationHovered', _this.imageAnnotatorAnnotationHovered);
        src = $(el).attr('src');
        pathname = _this.parseURI(src).pathname;
        return _this.editors[pathname] = editor;
      });
      return this;
    };

    ImageAnnotator.prototype._initEditingBehaviors = function() {
      this.annotator.editor.on('hide', this.onAnnotatorEditorHide);
      return this;
    };

    ImageAnnotator.prototype.imageAnnotatorSelectStart = function(e) {
      if ((this.annotator.editor != null) && $(this.annotator.editor.element).is(':visible')) {
        return this.annotator.editor.hide();
      }
    };

    ImageAnnotator.prototype.imageAnnotatorSelectFinish = function(e) {
      var annotation, editor, editorPos, pathname, positions, src;

      editor = e.editor;
      positions = e.positions;
      this.activeEditor = editor;
      src = $(editor.img).attr('src');
      pathname = this.parseURI(src).pathname;
      annotation = this.annotator.createAnnotation();
      annotation.shapes = positions;
      annotation.shape_type = 'rectangle';
      annotation.annotorious_schema_version = 'v0.1';
      annotation.type = 'image';
      annotation.src = pathname;
      editorPos = this.getElementPosition(positions, this.annotator.element, editor.img);
      return this.annotator.showEditor(annotation, editorPos);
    };

    ImageAnnotator.prototype.imageAnnotatorAnnotationHovered = function(e) {
      var annotations, editor, highest, viewerPos;

      editor = e.editor;
      annotations = e.annotations;
      highest = e.highestAnnotation;
      viewerPos = this.getElementPosition(highest.shapes, this.annotator.element, editor.img);
      return this.annotator.showViewer(annotations, viewerPos);
    };

    ImageAnnotator.prototype.disableAnnotator = function(img) {
      var uri;

      uri = this.parseURI($(img).attr('src'));
      return this.editors[uri.pathname].disable();
    };

    ImageAnnotator.prototype.enableAnnotator = function(img) {
      var uri;

      uri = this.parseURI($(img).attr('src'));
      return this.editors[uri.pathname].enable();
    };

    ImageAnnotator.prototype.imageAnnotatorMouseOver = function(e) {
      return this.annotator.clearViewerHideTimer();
    };

    ImageAnnotator.prototype.annotationDeleted = function(annotation) {
      if (annotation.src != null) {
        return this.editors[annotation.src].removeAnnotation(annotation);
      }
    };

    ImageAnnotator.prototype.imageAnnotatorMouseOut = function(e) {
      return this.annotator.startViewerHideTimer();
    };

    ImageAnnotator.prototype.onAnnotatorEditorHide = function() {
      if (this.activeEditor != null) {
        this.activeEditor.redrawAnnotations();
        return this.activeEditor = null;
      }
    };

    ImageAnnotator.prototype.addImageAnnotation = function(annotation) {
      if (this.editors[annotation.src] != null) {
        return this.editors[annotation.src].addAnnotation(annotation);
      } else {
        return console.log('The image annotator for the image %s could not be found.', annotation.src);
      }
    };

    ImageAnnotator.prototype.updateImageAnnotation = function(annotation) {
      return this.editors[annotation.src].updateAnnotation(annotation);
    };

    ImageAnnotator.prototype.setReadOnly = function(value) {
      var editor, src, _ref, _results;

      _ref = this.editors;
      _results = [];
      for (src in _ref) {
        editor = _ref[src];
        _results.push(editor.options.readOnly = value);
      }
      return _results;
    };

    ImageAnnotator.prototype.getElementPosition = function(shapes, wrapper, img) {
      var imgPos, offsetPos, wrapperPos;

      wrapperPos = $(wrapper).offset();
      imgPos = $(img).offset();
      offsetPos = {
        top: Math.round(imgPos.top) - Math.round(wrapperPos.top),
        left: Math.round(imgPos.left) - Math.round(wrapperPos.left)
      };
      return {
        top: shapes.topleft.y + offsetPos.top + 5,
        left: shapes.topleft.x + offsetPos.left
      };
    };

    ImageAnnotator.prototype.parseURI = function(uri) {
      var parser;

      parser = document.createElement('a');
      parser.href = uri;
      return parser;
    };

    return ImageAnnotator;

  })(Annotator.Plugin);

}).call(this);
