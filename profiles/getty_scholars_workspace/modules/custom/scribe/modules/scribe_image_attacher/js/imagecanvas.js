// Generated by CoffeeScript 1.6.2
(function() {
  var $,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  $ = jQuery;

  Annotator.ImageAnnotator = (function(_super) {
    var selecting;

    __extends(ImageAnnotator, _super);

    ImageAnnotator.prototype.events = {
      '.annotator-image-canvas mouseover': "onEditorMouseOver",
      '.annotator-image-canvas mouseout': "onEditorMouseOut",
      '.annotator-image-edit mousedown': "onEditorMouseDown",
      '.annotator-image-edit mouseup': "onEditorMouseUp",
      '.annotator-image-edit mousemove': "onEditorMouseMove"
    };

    ImageAnnotator.prototype.html = {
      imageWrapper: "<div class=\"annotator-image-wrapper\"></div>",
      editCanvas: "<canvas class=\"annotator-image-edit\"></canvas>"
    };

    selecting = false;

    ImageAnnotator.prototype.options = {
      readOnly: false,
      outerRectColor: '#000000',
      innerRectColor: '#FFFFFF',
      innerRectColorHighlight: '#C1FAC4'
    };

    ImageAnnotator.prototype.positions = {
      original: null,
      current: null
    };

    function ImageAnnotator(el, options) {
      this.onEditorMouseUp = __bind(this.onEditorMouseUp, this);      ImageAnnotator.__super__.constructor.call(this, $(this.html.imageWrapper)[0], options);
      this.img = $(el);
      this._initImageWrapper()._initEditor();
      this.annotations = [];
    }

    ImageAnnotator.prototype._initImageWrapper = function() {
      var props;

      props = {
        height: this.img.height(),
        position: 'relative',
        width: this.img.width()
      };
      this.element.css(props);
      this.img.wrap(this.element);
      return this;
    };

    ImageAnnotator.prototype._initEditor = function() {
      var attr, props;

      this.canvas = $(this.html.editCanvas)[0];
      props = {
        cursor: 'crosshair',
        height: this.img.height(),
        position: 'absolute',
        width: this.img.width(),
        zIndex: 10
      };
      $(this.canvas).css(props);
      attr = {
        height: this.img.height(),
        width: this.img.width()
      };
      $(this.canvas).attr(attr);
      this.img.before(this.canvas);
      this.context = this.canvas.getContext('2d');
      return this;
    };

    /*
    Section - Annotation API
    */


    ImageAnnotator.prototype.addAnnotation = function(annotation) {
      this.annotations.push(annotation);
      return this.redrawAnnotations();
    };

    ImageAnnotator.prototype.updateAnnotation = function(annotation) {
      var index;

      index = this.annotations.indexOf(annotation);
      this.annotations[index] = annotation;
      return redrawAnnotations();
    };

    ImageAnnotator.prototype.removeAnnotation = function(annotation) {
      this.annotations.splice(this.annotations.indexOf(annotation), 1);
      return this.redrawAnnotations();
    };

    /*
    Section - Editor API
    */


    ImageAnnotator.prototype.disable = function() {
      $(this.img).unwrap();
      return $(this.canvas).remove();
    };

    ImageAnnotator.prototype.enable = function() {
      $(this.img).wrap(this.element);
      return $(this.img).before(this.canvas);
    };

    /*
    Section - Event Callbacks
    */


    ImageAnnotator.prototype.onEditorMouseOver = function(e) {
      return this.publish('imageAnnotatorMouseOver', e);
    };

    ImageAnnotator.prototype.onEditorMouseOut = function(e) {
      return this.publish('imageAnnotatorMouseOut', e);
    };

    ImageAnnotator.prototype.onEditorMouseDown = function(e) {
      if (!this.options.readOnly) {
        e.preventDefault();
        this.selecting = true;
        this.positions.original = this.eventMousePosition(e);
        return this.publish('imageAnnotatorSelectStart', {
          editor: this,
          position: this.positions.original
        });
      }
    };

    ImageAnnotator.prototype.onEditorMouseUp = function(e) {
      this.selecting = false;
      if ((this.positions.current != null) && !this.options.readOnly) {
        if (Math.abs(this.positions.current.x - this.positions.original.x) > 3) {
          if (Math.abs(this.positions.current.y - this.positions.original.y) > 3) {
            return this.publish('imageAnnotatorSelectFinish', {
              editor: this,
              positions: this.normalizeCoordinates()
            });
          }
        }
      }
    };

    ImageAnnotator.prototype.onEditorMouseMove = function(e) {
      var ev, hoveredAnnotations;

      this.positions.current = this.eventMousePosition(e);
      if (this.selecting) {
        this.redrawAnnotations();
        return this.drawRect(this.positions.original, this.positions.current);
      } else {
        hoveredAnnotations = this.annotationsWithPoint(this.positions.current);
        if (hoveredAnnotations.length) {
          ev = {
            editor: this,
            annotations: hoveredAnnotations,
            highestAnnotation: this.highestAnnotation(hoveredAnnotations)
          };
          return this.publish('imageAnnotatorAnnotationHovered', ev);
        }
      }
    };

    /*
    Section - Canvas Operations
    */


    ImageAnnotator.prototype.redrawAnnotations = function() {
      var annotation, highlight, _i, _len, _ref, _results;

      this.clearCanvas();
      _ref = this.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        highlight = annotation.highlight != null ? highlight : false;
        _results.push(this.drawRect(annotation.shapes.topleft, annotation.shapes.bottomright, highlight));
      }
      return _results;
    };

    ImageAnnotator.prototype.drawRect = function(originalPos, currentPos, highlight) {
      var height, innerColor, width, x, y;

      if (highlight == null) {
        highlight = false;
      }
      x = originalPos.x;
      y = originalPos.y;
      width = currentPos.x - originalPos.x;
      height = currentPos.y - originalPos.y;
      this.context.strokeStyle = this.options.outerRectColor;
      this.context.strokeRect(x + 0.5, y + 0.5, width, height);
      if (width > 0 && height > 0) {
        x += 1.5;
        y += 1.5;
        width -= 2;
        height -= 2;
      } else if (width > 0 && height < 0) {
        x += 1.5;
        y -= 0.5;
        width -= 2;
        height += 2;
      } else if (width < 0 && height < 0) {
        x -= 0.5;
        y += 0.5;
        width += 2;
        height += 2;
      } else {
        x += 0.5;
        y += 1.5;
        width += 2;
        height -= 2;
      }
      innerColor = highlight ? this.options.innerRectColorHighlight : this.options.innerRectColor;
      this.context.strokeStyle = innerColor;
      return this.context.strokeRect(x, y, width, height);
    };

    ImageAnnotator.prototype.clearCanvas = function() {
      this.context.save;
      this.context.setTransform(1, 0, 0, 1, 0, 0);
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.context.restore;
    };

    /*
    Section - Mouse handling and point related utilities
    */


    ImageAnnotator.prototype.normalizeCoordinates = function() {
      var bottomright, topleft;

      topleft = {
        x: 0,
        y: 0
      };
      bottomright = {
        x: 0,
        y: 0
      };
      if (this.positions.current.y < this.positions.original.y) {
        topleft.y = this.positions.current.y;
        bottomright.y = this.positions.original.y;
      } else {
        topleft.y = this.positions.original.y;
        bottomright.y = this.positions.current.y;
      }
      if (this.positions.current.x < this.positions.original.x) {
        topleft.x = this.positions.current.x;
        bottomright.x = this.positions.original.x;
      } else {
        topleft.x = this.positions.original.x;
        bottomright.x = this.positions.current.x;
      }
      return {
        topleft: topleft,
        bottomright: bottomright
      };
    };

    ImageAnnotator.prototype.annotationsWithPoint = function(point) {
      var annotation, _i, _len, _ref, _results;

      _ref = this.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        if (this.pointInBox(point, annotation.shapes)) {
          _results.push(annotation);
        }
      }
      return _results;
    };

    ImageAnnotator.prototype.pointInBox = function(point, box) {
      if (point.x >= box.topleft.x && point.y >= box.topleft.y) {
        if (point.x <= box.bottomright.x && point.y <= box.bottomright.y) {
          return true;
        }
      }
      return false;
    };

    ImageAnnotator.prototype.highestAnnotation = function(annotations) {
      var box, highest, rest, _i, _len;

      highest = annotations[0], rest = 2 <= annotations.length ? __slice.call(annotations, 1) : [];
      for (_i = 0, _len = rest.length; _i < _len; _i++) {
        box = rest[_i];
        if (box.shapes.topleft.y < highest.shapes.topleft.y) {
          highest = box;
        }
      }
      return highest;
    };

    ImageAnnotator.prototype.eventMousePosition = function(e) {
      var offset, pos;

      offset = $(this.canvas).offset();
      return pos = {
        x: e.pageX - Math.round(offset.left),
        y: e.pageY - Math.round(offset.top)
      };
    };

    return ImageAnnotator;

  })(Annotator.Widget);

}).call(this);
