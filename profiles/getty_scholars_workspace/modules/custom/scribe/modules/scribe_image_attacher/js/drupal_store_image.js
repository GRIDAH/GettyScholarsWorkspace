// Generated by CoffeeScript 1.6.2
(function() {
  var $, Range, Scribe,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  Scribe = Drupal.settings.scribe;

  Range = Annotator.Range;

  Annotator.Plugin.DrupalStoreImage = (function(_super) {
    __extends(DrupalStoreImage, _super);

    function DrupalStoreImage() {
      this._getAnnotations = __bind(this._getAnnotations, this);      DrupalStoreImage.__super__.constructor.apply(this, arguments);
      this.fields['image_attachment_info'] = ['shapes', 'src', 'shape_type'];
      this.options.annotationType = 'image';
    }

    DrupalStoreImage.prototype.scribeEntityData = function(annotation) {
      var field;

      field = $(this.element).parents('.field');
      return field.data();
    };

    DrupalStoreImage.prototype.setupAnnotation = function(annotation, fireEvents) {
      var $field, annotation_entity_id, correct_entity, entity_id;

      if (fireEvents == null) {
        fireEvents = true;
      }
      if (annotation.attachment_id) {
        $field = $(this.element).parents('.field');
        correct_entity = true;
        entity_id = Number($field.data('entity_id'));
        annotation_entity_id = Number(annotation.entity_id);
        if ($field.data('entity_type') !== annotation.entity_type) {
          correct_entity = false;
        }
        if ($field.data('bundle') !== annotation.bundle) {
          correct_entity = false;
        }
        if ($field.data('field_name') !== annotation.field_name) {
          correct_entity = false;
        }
        if (entity_id !== annotation_entity_id) {
          correct_entity = false;
        }
        if (!correct_entity) {
          return annotation;
        }
      }
      if ((annotation.shapes != null) && (annotation.src != null)) {
        this.plugins.ImageAnnotator.addImageAnnotation(annotation);
      }
      annotation.highlights = [];
      annotation.ranges = [];
      if (fireEvents) {
        this.publish('annotationCreated', [annotation]);
      }
      return annotation;
    };

    DrupalStoreImage.prototype._getAnnotations = function() {
      var annotations;

      annotations = [];
      $.each(Scribe.attachments, function(index) {
        if (this.type === 'image') {
          $.extend(this, this.image_attachment_info);
          delete this.image_attachment_info;
          $.extend(this, this.annotation);
          delete this.annotation;
          return annotations.push(this);
        }
      });
      this.annotations = this.annotations.concat(annotations);
      return this.annotator.loadAnnotations(annotations);
    };

    return DrupalStoreImage;

  })(Annotator.Plugin.DrupalStore);

}).call(this);
