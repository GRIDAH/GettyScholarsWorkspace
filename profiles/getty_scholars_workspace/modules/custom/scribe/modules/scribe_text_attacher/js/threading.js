// Generated by CoffeeScript 1.7.1
(function() {
  var $,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  Annotator.Plugin.Threading = (function(_super) {
    __extends(Threading, _super);

    function Threading() {
      this.onReplyClick = __bind(this.onReplyClick, this);
      this.loadThread = __bind(this.loadThread, this);
      this.onViewerLoad = __bind(this.onViewerLoad, this);
      this.startViewerHideTimer = __bind(this.startViewerHideTimer, this);
      this.annotatorOnEditorSubmit = __bind(this.annotatorOnEditorSubmit, this);
      return Threading.__super__.constructor.apply(this, arguments);
    }

    Threading.prototype.html = {
      reply: "<button title=\"Reply\" class=\"annotator-reply\">Reply</button>",
      list: "<ul class=\"annotator-listing\"></ul>",
      editor: "<form class=\"annotator-editor annotator-reply-form\">\n  <textarea placeholder=\"Reply...\"></textarea>\n  <div>\n    <a href=\"#cancel\" class=\"annotator-cancel annotator-reply-cancel\">Cancel</a>\n    <a href=\"#save\" class=\"annotator-save annotator-reply-save annotator-focus\">Save</a>\n  </div>\n</form>"
    };

    Threading.prototype.editReply = false;

    Threading.prototype.events = {
      ".annotator-reply-cancel click": "cancel",
      ".annotator-reply-save click": "submit",
      "button.annotator-reply click": "onReplyClick"
    };

    Threading.prototype.options = {
      readOnly: false
    };

    Threading.prototype.pluginInit = function() {
      this.viewer = this.annotator.viewer;
      this.viewer.on('load', this.onViewerLoad);
      this.annotator.startViewerHideTimer = this.startViewerHideTimer;
      $(this.viewer.element).unbind('mouseout').bind({
        'mouseout': this.startViewerHideTimer
      });
      this.annotator.editor.unsubscribe('save', this.annotator.onEditorSubmit);
      this.annotator.editor.on('save', this.annotatorOnEditorSubmit);
      this.item = this.viewer.item;
      return this.annotator.deleteAnnotation = this.annotatorDeleteAnnotation;
    };

    Threading.prototype.annotatorDeleteAnnotation = function(annotation) {
      var h, _i, _len, _ref;
      if (annotation.highlights != null) {
        _ref = annotation.highlights;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          h = _ref[_i];
          $(h).replaceWith(h.childNodes);
        }
      }
      this.publish('annotationDeleted', [annotation]);
      return annotation;
    };

    Threading.prototype.annotatorOnEditorSubmit = function(annotation) {
      this.annotator.publish('annotationEditorSubmit', [this.annotator.editor, annotation]);
      if (annotation.annotation_id == null) {
        return this.annotator.setupAnnotation(annotation);
      } else {
        return this.annotator.updateAnnotation(annotation);
      }
    };

    Threading.prototype.startViewerHideTimer = function() {
      if (!this.annotator.viewerHideTimer && !this.editReply) {
        return this.annotator.viewerHideTimer = setTimeout(this.annotator.viewer.hide, 250);
      }
    };

    Threading.prototype.onViewerLoad = function(annotations) {
      var annotation, controls, index, list, sublist, _i, _len, _results;
      list = $(this.viewer.element).find('.annotator-listing > .annotator-item');
      _results = [];
      for (index = _i = 0, _len = annotations.length; _i < _len; index = ++_i) {
        annotation = annotations[index];
        if (annotation.children != null) {
          sublist = $(this.html.list).clone();
          this.loadThread(sublist, annotation.children);
          controls = $(list[index]).append(sublist).find('.annotator-controls');
          _results.push(this.addReplyButton(controls));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Threading.prototype.loadThread = function(list, annotations) {
      var child, controller, controls, del, edit, item, sublist, userDiv, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = annotations.length; _i < _len; _i++) {
        child = annotations[_i];
        item = $(this.item).clone().append('<div>' + child.text + '</div>');
        item.data({
          annotation: child
        });
        list.append(item);
        controls = item.find('.annotator-controls');
        controls.find('.annotator-link').remove();
        edit = controls.find('.annotator-edit');
        del = controls.find('.annotator-delete');
        if (this.options.readOnly) {
          edit.remove();
          del.remove();
        } else {
          controller = {
            showEdit: function() {
              return edit.removeAttr('disabled');
            },
            hideEdit: function() {
              return edit.attr('disabled', 'disabled');
            },
            showDelete: function() {
              return del.removeAttr('disabled');
            },
            hideDelete: function() {
              return del.attr('disabled', 'disabled');
            }
          };
        }
        if (this.annotator.plugins.DrupalPermissions != null) {
          userDiv = $('<div />')[0];
          item.append(userDiv);
          this.annotator.plugins.DrupalPermissions.updateViewer(userDiv, child, controller);
        }
        if ((child.children != null) && child.children.length > 0) {
          sublist = $(this.html.list).clone();
          item.append(sublist);
          _results.push(this.loadThread(sublist, child.children));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Threading.prototype.addReplyButton = function(element) {
      var reply_button;
      reply_button = $(this.html.reply).clone();
      return element.prepend(reply_button);
    };

    Threading.prototype.onReplyClick = function(event) {
      var annotation_item, editor;
      $(event.target).parents('.annotator-annotation').find('.annotator-reply-form').remove();
      editor = $(this.html.editor).clone();
      annotation_item = $(event.target).parents('.annotator-annotation')[0];
      $(annotation_item).append(editor);
      return this.editReply = true;
    };

    Threading.prototype.cancel = function(event) {
      if (event != null) {
        if (typeof event.preventDefault === "function") {
          event.preventDefault();
        }
      }
      $(event.target).parents('.annotator-reply-form').remove();
      return this.editReply = false;
    };

    Threading.prototype.submit = function(event) {
      var annotation, annotation_item, annotation_parent, annotation_root, attachment, controls, form, list, new_annotation, new_item, new_list, parent_data, root_data, val;
      if (event != null) {
        if (typeof event.preventDefault === "function") {
          event.preventDefault();
        }
      }
      form = $(event.target).parents('.annotator-reply-form');
      val = form.find('textarea').val();
      annotation_item = $(event.target).parents('.annotator-annotation');
      annotation = annotation_item.data().annotation;
      annotation_parent = $(annotation_item).first();
      annotation_root = $(annotation_item).last();
      parent_data = annotation_parent.data();
      root_data = annotation_root.data();
      attachment = root_data.annotation;
      new_item = $(this.item).clone().append('<div>' + val + '</div>');
      controls = new_item.find('.annotator-controls');
      this.addReplyButton(controls);
      list = annotation_item.children('ul:first');
      if (list.length > 0) {
        list.append(new_item);
      } else {
        new_list = $(this.html.list).clone();
        new_list.append(new_item);
        annotation_item.append(new_list);
      }
      new_annotation = this.annotator.createAnnotation();
      new_annotation.text = val;
      new_annotation.field_parent_ref = {
        id: attachment.attachment_id
      };
      if (annotation.annotation_id != null) {
        new_annotation.parent_id = annotation.annotation_id;
      } else {
        new_annotation.parent_id = annotation.annotation.annotation_id;
      }
      console.log('stuff');
      console.log(new_annotation);
      this.annotator.onEditorSubmit(new_annotation);
      if (annotation.children) {
        annotation.children.push(new_annotation);
      } else {
        annotation.children = [new_annotation];
      }

      /*
      The full annotation data is stored in the highlight.
      So we need to go back and update the annotation there, regardless
      of where we are in the thread.
       */
      $(annotation.highlights).data({
        annotation: annotation
      });
      form.hide();
      return this.editReply = false;
    };

    return Threading;

  })(Annotator.Plugin);

}).call(this);
