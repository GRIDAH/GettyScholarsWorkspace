// Generated by CoffeeScript 1.7.1
(function() {
  var $, CreatePerm, ImageCreatePerm, Range, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  CreatePerm = Drupal.settings.scribe.permissions.text.create;

  ImageCreatePerm = Drupal.settings.scribe.permissions.image.create;

  Range = Annotator.Range;

  util = {
    uuid: (function() {
      var counter;
      counter = 0;
      return function() {
        return counter++;
      };
    })(),
    getGlobal: function() {
      return (function() {
        return this;
      })();
    },
    maxZIndex: function($elements) {
      var all, el;
      all = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = $elements.length; _i < _len; _i++) {
          el = $elements[_i];
          if ($(el).css('position') === 'static') {
            _results.push(-1);
          } else {
            _results.push(parseInt($(el).css('z-index'), 10) || -1);
          }
        }
        return _results;
      })();
      return Math.max.apply(Math, all);
    },
    mousePosition: function(e, offsetEl) {
      var offset;
      offset = $(offsetEl).offset();
      return {
        top: e.pageY - offset.top,
        left: e.pageX - offset.left
      };
    },
    preventEventDefault: function(event) {
      return event != null ? typeof event.preventDefault === "function" ? event.preventDefault() : void 0 : void 0;
    }
  };

  Annotator.Plugin.DrupalPermissions = (function(_super) {
    __extends(DrupalPermissions, _super);

    DrupalPermissions.prototype.events = {
      'beforeAnnotationCreated': 'addFieldsToAnnotation'
    };

    DrupalPermissions.prototype.options = {
      showViewPermissionsCheckbox: true,
      showEditPermissionsCheckbox: true,
      userId: function(user) {
        return user;
      },
      userString: function(user) {
        return user;
      },
      userAuthorize: function(action, annotation, user) {
        var token, tokens, _i, _len;
        if (annotation.permissions) {
          tokens = annotation.permissions[action] || [];
          if (tokens.length === 0) {
            return true;
          }
          for (_i = 0, _len = tokens.length; _i < _len; _i++) {
            token = tokens[_i];
            if (this.userId(user) === token) {
              return true;
            }
          }
          return false;
        } else if (annotation.user) {
          return user && this.userId(user) === this.userId(annotation.user);
        }
        return true;
      },
      user: '',
      permissions: {
        'read': [],
        'update': [],
        'delete': [],
        'admin': []
      }
    };

    function DrupalPermissions(element, options) {
      this._setAuthFromToken = __bind(this._setAuthFromToken, this);
      this.updateViewer = __bind(this.updateViewer, this);
      this.updateAnnotationPermissions = __bind(this.updateAnnotationPermissions, this);
      this.updatePermissionsField = __bind(this.updatePermissionsField, this);
      this.addFieldsToAnnotation = __bind(this.addFieldsToAnnotation, this);
      this.checkForEndSelection = __bind(this.checkForEndSelection, this);
      DrupalPermissions.__super__.constructor.apply(this, arguments);
      if (this.options.user) {
        this.setUser(this.options.user);
        delete this.options.user;
      }
    }

    DrupalPermissions.prototype.pluginInit = function() {
      var createCallback, self;
      if (!Annotator.supported()) {
        return;
      }
      self = this;
      createCallback = function(method, type) {
        return function(field, annotation) {
          return self[method].call(self, type, field, annotation);
        };
      };
      if (!this.user && this.annotator.plugins.Auth) {
        this.annotator.plugins.Auth.withToken(this._setAuthFromToken);
      }
      if (this.options.showViewPermissionsCheckbox === true) {
        this.annotator.editor.addField({
          type: 'checkbox',
          label: Annotator._t('Allow anyone to <strong>view</strong> this annotation'),
          load: createCallback('updatePermissionsField', 'read'),
          submit: createCallback('updateAnnotationPermissions', 'read')
        });
      }
      if (this.options.showEditPermissionsCheckbox === true) {
        this.annotator.editor.addField({
          type: 'checkbox',
          label: Annotator._t('Allow anyone to <strong>edit</strong> this annotation'),
          load: createCallback('updatePermissionsField', 'update'),
          submit: createCallback('updateAnnotationPermissions', 'update')
        });
      }
      this.annotator.viewer.addField({
        load: this.updateViewer
      });
      if (this.annotator.plugins.Filter) {
        this.annotator.plugins.Filter.addFilter({
          label: Annotator._t('User'),
          property: 'user',
          isFiltered: (function(_this) {
            return function(input, user) {
              var keyword, _i, _len, _ref;
              user = _this.options.userString(user);
              if (!(input && user)) {
                return false;
              }
              _ref = input.split(/\s*/);
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                keyword = _ref[_i];
                if (user.indexOf(keyword) === -1) {
                  return false;
                }
              }
              return true;
            };
          })(this)
        });
      }
      $(document).unbind('mouseup', this.annotator.checkForEndSelection).bind({
        'mouseup': this.checkForEndSelection
      });
      return this.annotator.viewer.onDeleteClick = this.onDeleteClick;
    };

    DrupalPermissions.prototype.onDeleteClick = function(event) {
      var deleteConfirmed;
      deleteConfirmed = confirm(Annotator._t('Are you sure you want to delete this annotation?'));
      if (deleteConfirmed) {
        return this.onButtonClick(event, 'delete');
      }
    };

    DrupalPermissions.prototype.checkForEndSelection = function(event) {
      var container, newPos, pos, range, _i, _len, _ref;
      this.annotator.mouseIsDown = false;
      if (this.annotator.ignoreMouseup) {
        return;
      }
      this.annotator.selectedRanges = this.annotator.getSelectedRanges();
      if (!this.checkCreatePerm()) {
        return;
      }
      _ref = this.annotator.selectedRanges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        range = _ref[_i];
        container = range.commonAncestor;
        if ($(container).hasClass('annotator-hl')) {
          container = $(container).parents('[class^=annotator-hl]')[0];
        }
        if (this.annotator.isAnnotator(container)) {
          return;
        }
      }
      if (event && this.annotator.selectedRanges.length) {
        pos = util.mousePosition(event, this.annotator.wrapper[0]);
        newPos = this.annotator.calculateViewportPosition(pos);
        return this.annotator.adder.css(newPos).show();
      } else {
        return this.annotator.adder.hide();
      }
    };

    DrupalPermissions.prototype.checkCreatePerm = function() {
      var createPerm, parentContainer;
      if (this.annotator.selectedRanges.length > 0) {
        parentContainer = $(this.annotator.selectedRanges[0].commonAncestor).parents('.field');
        createPerm = parentContainer.data('annotation_create');
        return parseInt(createPerm, 10) === 1;
      }
      return false;
    };

    DrupalPermissions.prototype.setUser = function(user) {
      return this.user = user;
    };

    DrupalPermissions.prototype.addFieldsToAnnotation = function(annotation) {
      if (annotation) {
        annotation.permissions = this.options.permissions;
        if (this.user) {
          return annotation.user = this.user;
        }
      }
    };

    DrupalPermissions.prototype.authorize = function(action, annotation, user) {
      if (user === void 0) {
        user = this.user;
      }
      if (this.options.userAuthorize) {
        return this.options.userAuthorize.call(this.options, action, annotation, user);
      } else {
        return true;
      }
    };

    DrupalPermissions.prototype.updatePermissionsField = function(action, field, annotation) {
      var input;
      field = $(field).show();
      input = field.find('input').removeAttr('disabled');
      if (!this.authorize('admin', annotation)) {
        field.hide();
      }
      if (this.authorize(action, annotation || {}, null)) {
        return input.attr('checked', 'checked');
      } else {
        return input.removeAttr('checked');
      }
    };

    DrupalPermissions.prototype.updateAnnotationPermissions = function(type, field, annotation) {
      var dataKey;
      if (!annotation.permissions) {
        annotation.permissions = this.options.permissions;
      }
      dataKey = type + '-permissions';
      if ($(field).find('input').is(':checked')) {
        return annotation.permissions[type] = [];
      } else {
        return annotation.permissions[type] = [this.user];
      }
    };

    DrupalPermissions.prototype.updateViewer = function(field, annotation, controls) {
      var date, dateString, user, username;
      field = $(field);
      if (annotation.updated != null) {
        date = new Date(annotation.updated * 1000);
      } else {
        date = new Date();
      }
      dateString = date.format('shortDate') + ' ' + date.format('shortTime');
      username = this.options.userString(annotation.user);
      if (annotation.user && username && typeof username === 'string') {
        user = this.options.userString(annotation.user);
        field.html(user + ' - ' + dateString).addClass('annotator-user');
      } else {
        field.remove();
      }
      if (controls) {
        if (!this.authorize('update', annotation)) {
          controls.hideEdit();
        }
        if (!this.authorize('delete', annotation)) {
          return controls.hideDelete();
        }
      }
    };

    DrupalPermissions.prototype._setAuthFromToken = function(token) {
      return this.setUser(token.userId);
    };

    return DrupalPermissions;

  })(Annotator.Plugin);

}).call(this);
