// Generated by CoffeeScript 1.7.1
(function() {
  var $,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  $ = jQuery;

  Drupal.ScribeRest = (function() {
    var settings;

    settings = Drupal.settings.scribe;

    ScribeRest.prototype.resources = {
      attachment: Drupal.settings.basePath + 'scribe_attachment.json',
      annotation: Drupal.settings.basePath + 'scribe_annotation.json',
      taxonomy_term: Drupal.settings.basePath + 'taxonomy_term.json'
    };

    ScribeRest.prototype.id_map = {
      scribe_attachment: 'attachment_id',
      scribe_annotation: 'annotation_id',
      taxonomy_term: 'tid'
    };

    ScribeRest.prototype.methods = {
      read: 'GET',
      create: 'POST',
      update: 'PUT',
      destroy: 'DELETE',
      list: 'GET'
    };

    function ScribeRest() {
      this.settings = Drupal.settings.scribe;
    }

    ScribeRest.prototype.getAnnotation = function(id) {
      return ajaxRequest('annotation');
    };

    ScribeRest.prototype.ajaxOpts = function(method) {
      var headers, http_method, opts;
      http_method = this.methods[method];
      headers = {
        'X-CSRF-Token': this.settings.csrf_token
      };
      opts = {
        type: http_method,
        headers: headers,
        dataType: "json"
      };
      return opts;
    };

    ScribeRest.prototype.getExistingTags = function(tags) {
      var result;
      return result = this.ResourceList('taxonomy_term', {
        name: tags
      });
    };

    ScribeRest.prototype.createNewTags = function(tags, final) {
      var response;
      response = this.ResourceList('taxonomy_term', {
        name: tags
      });
      return response.done((function(_this) {
        return function(data) {
          var done, new_tags, old_tags, result, tag, tag_list, _i, _len;
          old_tags = (function() {
            var _i, _len, _ref, _results;
            _ref = data.list;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tag = _ref[_i];
              _results.push(tag.name);
            }
            return _results;
          })();
          new_tags = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = tags.length; _i < _len; _i++) {
              tag = tags[_i];
              if ((__indexOf.call(old_tags, tag) < 0)) {
                _results.push(tag);
              }
            }
            return _results;
          })();
          done = [];
          for (_i = 0, _len = new_tags.length; _i < _len; _i++) {
            tag = new_tags[_i];
            result = _this.createTag(tag);
            done.push(result);
          }
          tag_list = data.list;
          return $.when.apply(_this, done).then(function() {
            var data, _j, _len1, _results;
            data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            _results = [];
            for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
              tag = data[_j];
              _results.push(tag_list.push(tag[0]));
            }
            return _results;
          }).then(function() {
            return final(tag_list);
          });
        };
      })(this));
    };

    ScribeRest.prototype.final = function(tag_list) {
      return console.dir(tag_list);
    };

    ScribeRest.prototype.createTag = function(name, machine_name, vid) {
      var tag;
      if (machine_name == null) {
        machine_name = 'tags';
      }
      if (vid == null) {
        vid = 1;
      }
      tag = {
        name: name,
        machine_name: machine_name,
        vocabulary: {
          id: vid
        }
      };
      return this.ResourceRequest('taxonomy_term', 'create', tag);
    };

    ScribeRest.prototype.ResourceList = function(resource, filters) {
      var list, response;
      if (filters == null) {
        filters = {};
      }
      list = {};
      response = this.ResourceRequest(resource, 'list', filters);
      return $.when(response).then(function(data) {
        return list = data.list;
      });
    };

    ScribeRest.prototype.ResourceRequest = function(resource, method, data, id) {
      var end_data, opts, url;
      if (data == null) {
        data = {};
      }
      if (id == null) {
        id = 0;
      }
      if (id) {
        url = this.resources[resource] + '/' + id;
      } else {
        url = this.resources[resource];
      }
      if (method !== 'list') {
        end_data = JSON.stringify(data);
      } else {
        end_data = data;
      }
      opts = this.ajaxOpts(method);
      $.extend(opts, {
        data: end_data,
        contentType: "application/json; charset=utf-8"
      });
      return $.ajax(url, opts);
    };

    ScribeRest.prototype.RequestProcessResponse = function(data) {
      return console.dir('called');
    };

    ScribeRest.prototype.RequestProcessList = function(data) {
      console.log('called');
      console.dir(data.list);
      return data.list;
    };

    ScribeRest.prototype.RequestError = function(data) {
      return console.dir(data);
    };

    return ScribeRest;

  })();

}).call(this);
