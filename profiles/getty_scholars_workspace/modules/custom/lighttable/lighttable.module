<?php
/**
 * @file
 * Code for the LightTable feature.
 */

include_once 'lighttable.features.inc';

/**
 * Implements hook_init().
 */
function lighttable_init() {
  // drupal_add_js(drupal_get_path('module', 'lighttable') . '/lighttable.js');
  // drupal_add_css(drupal_get_path('module', 'lighttable') . '/lighttable.css');
}

/**
 * Implements hook_menu().
 */
function lighttable_menu() {
  $items['project/%/lighttable'] = array(
    'title callback' => 'lighttable_page_title_callback',
    'title arguments' => array(1),
    'page callback' => 'lighttable_display',
    'page arguments' => array(1),
    'access callback' => 'og_user_access',
    'access arguments' => array('node', 1, 'create comparison content'),
  );

  $items['lighttable/comparison/%'] = array(
    'title' => 'Make Comparison',
    'page callback' => 'lighttable_create_comparison',
    'page arguments' => array(2),
    'access callback' => 'og_user_access',
    'access arguments' => array('node', 2, 'create comparison content'),
  );

  $items['lighttable/available-images/%'] = array(
    'title' => 'Available Images view',
    'page callback' => 'lighttable_available_images',
    'page arguments' => array(2),
    'access callback' => 'og_is_member',
    'access arguments' => array('node', 2),
  );

  return $items;
}

function lighttable_page_title_callback($gid) {
  return node_load($gid)->title . ' Light Table';
}

function lighttable_display($gid) {
  drupal_add_js(drupal_get_path('module', 'lighttable') . '/lighttable.js');
  drupal_add_css(drupal_get_path('module', 'lighttable') . '/lighttable.css');
  $output = '';

  // Add container for recent images
  $recent = '<div id="lighttable-left"><div id="make-comparison">MAKE COMPARISON</div><div id="lt-recent-images"><h3>Recent Images</h3><div class="content"></div></div></div>';
  $output .= $recent;

  // Add container for light table workspace
  // $lt_main = '<div id="lighttable"><div id="make-comparison">MAKE COMPARISON</div></div>';
  $lt_main = '<div id="lighttable"></div>';
  $output .= $lt_main;

  // Exposed filters
  $view = views_get_view('project_images');
  $available_images_block = $view->preview('available_images_block', array($gid));

  $exposed_plugin = $view->display_handler->get_plugin('exposed_form');
  $exposed_form = $exposed_plugin->render_exposed_form();

  // Add view with available images for this project
  $available_images_grid = $available_images_block;
  // $available_images_list = views_embed_view('project_images', 'available_images_list_block', $gid);
  $available_images = '
    <div id="lt-available-images" class="show-hide-container clearfix open">
      <div class="clearfix">
        <h3><a class="show-hide-trigger" href="#">' . t('Project Images') . '</a></h3>
        <a class="show-hide-trigger help-text" href="#">
          <span class="open-hide">' . t('Show') . '</span>
          <span class="closed-hide">' . t('Hide') . '</span>
        </a>
      </div>
      <div class="show-hide-content">
        ' . $exposed_form . '
        ' . $available_images_grid . '
      </div>
    </div>
  ';
  $output .= $available_images;

  return $output;
}

function lighttable_create_comparison($gid) {
  global $user;
  // Create new node
  $new_node = new stdClass();
  $new_node->is_new = TRUE;
  $new_node->type = 'comparison';
  $new_node->language = LANGUAGE_NONE;
  node_object_prepare($new_node);

  $new_node->title = 'Comparison';

  if (isset($gid) && og_is_member('node', $gid)) {
    $new_node->og_group_ref['und'][] = array('target_id' => $gid);

    // Add files to this
    foreach ($_POST['items'] as $delta => $item) {
      $fc_item = entity_create('field_collection_item', array('field_name' => 'field_image_reference_info'));
      $fc_item->field_image_reference[LANGUAGE_NONE][0] = array('target_id' => (int) $item['fid']);
      $fc_item->field_x_pos[LANGUAGE_NONE][0] = array('value' => (float) $item['left']);
      $fc_item->field_y_pos[LANGUAGE_NONE][0] = array('value' => (float) $item['top']);
      $fc_item->field_width[LANGUAGE_NONE][0] = array('value' => (float) $item['width']);
      $fc_item->field_height[LANGUAGE_NONE][0] = array('value' => (float) $item['height']);
      $fc_item->setHostEntity('node', $new_node);
      $fc_item->save();

      $node->field_image_reference_info[LANGUAGE_NONE][$delta] = array('value' => $fc_item->item_id, 'revision_id' => $fc_item->revision_id);
    }

    node_save($new_node);
    print $new_node->nid;
  }
  else {
    print 'Unable to access current project images in order to create a comparison.';
  }
}

/**
 * Implements hook_form_alter().
 */
function lighttable_form_comparison_node_form_alter(&$form, &$form_state) {
  // Display only the available images for this project
  if (isset($form_state['node']->og_group_ref['und'])) {
    $project_id = $form_state['node']->og_group_ref['und'][0]['target_id'];
  }
  else {
    $project_id = arg(3);
  }

  if (is_numeric($project_id)) {
    // Get all available images for this project, and display only those on form
    $available_images = views_get_view_result('project_images', 'available_images_block', $project_id);
    $opts = array();
    foreach ($available_images as $available_image) {
      $thumb = $available_image->field_field_image[0]['rendered'];
      $opts[$thumb['#item']['fid']] = drupal_render($thumb);
    }

    if (count($opts) < 2) {
      drupal_set_message('There are not enough available images to make a comparison. Please upload at least two images in order to perform this action.', 'warning');
      drupal_goto('dashboard/' . $project_id);
    }

    $form['field_image_references']['und']['#options'] = $opts;
  }
  else {
    drupal_set_message('Please select a project in order to make a comparison.');
    drupal_goto();
  }
}

// Disable manually editing og_group_ref on edit pages. This should only ever
// be set once. This alter should also be put on a more general module.
function lighttable_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['nid']) && $form['nid']['#value'] != NULL) {
    $form['og_group_ref']['#disabled'] = TRUE;
  }
}

/**
 * Returns the HTML of available images view
 */
function lighttable_available_images($gid) {
  if ($gid) {
    // Is there a way to get just the content and not the exposed filters?
    $grid_view = views_embed_view('project_images', 'available_images_block', $gid);
    $list_view = views_embed_view('project_images', 'available_images_list_block', $gid);

    // Send both grid and list views
    $ret = array('grid' => $grid_view, 'list' => $list_view);
    print json_encode($ret);
  }
  else {
    print 'Unable to get available images for the current project.';
  }
}

/**
 * Implements hook_form_FORMNAME_alter().
 */
function lighttable_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  $form['submit']['#type'] = 'image_button';
  $form['submit']['#src'] = drupal_get_path('module', 'lighttable') . '/images/search.png';

  $form['tid']['#prefix'] = '<div id="filter-toggle"></div>';
}

function lighttable_views_query_alter(&$view, &$query) {
  if ($view->name == 'project_images') {
    // Removes duplicate file images when multiple come from the same node
    $query->add_where_expression(0, 'file_managed_file_usage.fid = field_data_field_image.field_image_fid');
  }
}

/**
 * Implements hook_preprocess().
 */
function lighttable_preprocess_file_entity(&$vars) {
  $vars['page'] = TRUE;
}

/**
 * Implements hook_file_view_alter().
 */
function lighttable_file_view_alter(&$build) {
  unset($build['#contextual_links']);
}
